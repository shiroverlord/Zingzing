package dao;

import java.util.List;

import model.Autoriser;

import org.hibernate.Query;
import org.hibernate.Transaction;

public class AutoriserDAO {

	public static Autoriser findByIds(Long id_droit, Long id_salle) {
		Autoriser a = null;
		Transaction tx = null;
		boolean isActive = BDDUtils.getTransactionStatus();
		try {
			tx = BDDUtils.beginTransaction(isActive);
			Query q = null;
			q = BDDUtils.getCurrentSession().createQuery(
					"SELECT a FROM Autoriser a " +
					"WHERE a.autoriserId.id_droit = :id_droit " +
					"AND a.autoriserId.id_salle = :id_salle");
			q.setParameter("id_droit", id_droit);
			q.setParameter("id_salle", id_salle);
			a = (Autoriser) q.uniqueResult();
			BDDUtils.commit(isActive, tx);
		}
		catch(Exception ex) {
			System.out.println("Hibernate failure : "+ ex.getMessage());
			BDDUtils.rollback(isActive, tx);
		}
		return a;
	}
	
	@SuppressWarnings("unchecked")
	public static List<Autoriser> getAutorisersByUtilisateurId(Long idUtilisateur) {
		List<Autoriser> la = null;
		Transaction tx = null;
		boolean isActive = BDDUtils.getTransactionStatus();
		try {
			tx = BDDUtils.beginTransaction(isActive);
			Query q = null;
			q = BDDUtils.getCurrentSession().createQuery(
					"SELECT a FROM Autoriser a " +
					"WHERE a.attribuerId.id_utilisateur = :idUtilisateur");
			q.setParameter("idUtilisateur", idUtilisateur);
			la = (List<Autoriser>) q.list();
			BDDUtils.commit(isActive, tx);
		}
		catch(Exception ex) {
			System.out.println("Hibernate failure : "+ ex.getMessage());
			BDDUtils.rollback(isActive, tx);
		}
		return la;
	}
	
	@SuppressWarnings("unchecked")
	public static List<Autoriser> getAutorisersByCodeId(Long idCode) {
		List<Autoriser> la = null;
		Transaction tx = null;
		boolean isActive = BDDUtils.getTransactionStatus();
		try {
			tx = BDDUtils.beginTransaction(isActive);
			Query q = null;
			q = BDDUtils.getCurrentSession().createQuery(
					"SELECT a FROM Autoriser a " +
					"WHERE a.attribuerId.id_code = :idCode");
			q.setParameter("idCode", idCode);
			la = (List<Autoriser>) q.list();
			BDDUtils.commit(isActive, tx);
		}
		catch(Exception ex) {
			System.out.println("Hibernate failure : "+ ex.getMessage());
			BDDUtils.rollback(isActive, tx);
		}
		return la;
	}
	
	@SuppressWarnings("unchecked")
	public static List<Autoriser> getAllAutorisers() {
		List<Autoriser> la = null;
		Transaction tx = null;
		boolean isActive = BDDUtils.getTransactionStatus();
		try {
			tx = BDDUtils.beginTransaction(isActive);
			Query q = null;
			q = BDDUtils.getCurrentSession().createQuery("SELECT a FROM Autoriser a");
			la = (List<Autoriser>) q.list();
			BDDUtils.commit(isActive, tx);
		}
		catch(Exception ex) {
			System.out.println("Hibernate failure : "+ ex.getMessage());
			BDDUtils.rollback(isActive, tx);
		}
		return la;
	}
	
	public static boolean insert(Autoriser a) {
		Transaction tx = null;
		boolean isActive = BDDUtils.getTransactionStatus();
		try {
			tx = BDDUtils.beginTransaction(isActive);
			BDDUtils.getCurrentSession().save(a);
			BDDUtils.commit(isActive, tx);
		}
		catch(Exception ex) {
			System.out.println("Hibernate failure : "+ ex.getMessage());
			BDDUtils.rollback(isActive, tx);
			return false;
		}
		return true;
	}
	
	public static boolean update(Autoriser a) {
		Transaction tx = null;
		boolean isActive = BDDUtils.getTransactionStatus();
		try {
			tx = BDDUtils.beginTransaction(isActive);
			BDDUtils.getCurrentSession().update(a);
			BDDUtils.commit(isActive, tx);
		}
		catch(Exception ex) {
			System.out.println("Hibernate failure : "+ ex.getMessage());
			BDDUtils.rollback(isActive, tx);
			return false;
		}
		return true;
	}
	
	public static boolean delete(Autoriser a) {
		Transaction tx = null;
		boolean isActive = BDDUtils.getTransactionStatus();
		try {
			tx = BDDUtils.beginTransaction(isActive);
			BDDUtils.getCurrentSession().delete(a);
			BDDUtils.commit(isActive, tx);
		}
		catch(Exception ex) {
			System.out.println("Hibernate failure : "+ ex.getMessage());
			BDDUtils.rollback(isActive, tx);
			return false;
		}
		return true;
	}
}
