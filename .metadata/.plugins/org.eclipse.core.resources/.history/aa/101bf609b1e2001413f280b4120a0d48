package dao;

import java.io.File;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;

public class BDDUtils {
	
	/*private static final String SERVER_NAME = "localhost";
	private static final int SERVER_PORT = 5432;
	private static final String BDD_NAME = "redproject";
	private static final String BDD_USER_NAME = "postgres";
	private static final String BDD_USER_PASSWORD = "password";
	
	public static Connection getConnexion() {
		try {
			Class.forName("org.postgresql.Driver");
		} catch (ClassNotFoundException e) {
			System.out.println("Where is your PostgreSQL JDBC Driver?  Include in your library path!");
			e.printStackTrace();
			return null;
		}
		System.out.println("PostgreSQL JDBC Driver Registered!");

		Connection connection = null;
		try {
			connection = DriverManager.getConnection("jdbc:postgresql://"+SERVER_NAME+":"+SERVER_PORT+"/"+BDD_NAME, BDD_USER_NAME, BDD_USER_PASSWORD);
		} catch (SQLException e) {
			System.out.println("Connection Failed! Check output console");
			e.printStackTrace();
			return null;
		}
		
		if (connection != null) {
			System.out.println("You made it, take control your database now!");
		} else {
			System.out.println("Failed to make connection!");
			return null;
		}
		
		return connection;
	}*/
	public static String CONFIG_FILE = System.getProperty("user.dir") + "/hibernate.cfg.xml";
	protected static SessionFactory sessionFactory;
	
	private static void buildSessionFactory() {
		if (sessionFactory==null) {
			Configuration config = new Configuration().configure(new File(CONFIG_FILE));
			StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().applySettings(config.getProperties()).build();
			sessionFactory = config.buildSessionFactory(ssr);
		}
	}

	protected static Session getCurrentSession() throws HibernateException {
		return getSessionFactory().getCurrentSession();
	}

	protected static SessionFactory getSessionFactory() throws HibernateException {
		if(sessionFactory == null) {
			buildSessionFactory();
		}
		return sessionFactory;
	}

	public static boolean getTransactionStatus() throws HibernateException {
		return getCurrentSession().getTransaction().isActive();
	}
	
	public static Transaction beginTransaction(boolean isActive) throws HibernateException {
		if(!isActive) {
			return getSessionFactory().getCurrentSession().beginTransaction();
		}
		return null;
	}
	
	public static void commit(boolean isActive, Transaction tx) throws HibernateException {
		if(!isActive) {
			tx.commit();
		}
	}
	
	public static void rollback(boolean isActive, Transaction tx) throws HibernateException {
		if(!isActive && tx != null) {
			tx.rollback();
		}
	}
}
